/**
* Name: ProjetSMAModel
* Based on the internal empty template. 
* Author: Lukas
* Tags: 
*/


model ProjetSMAModel

//Our World. Keeps tab on everything global, and initialization
global {
	int nb_ants_init <- 100;
	float ant_satisfaction_increment <- 0.05;
	float ant_max_satisfaction <- 1.0;
	file map_init <- image_file("../includes/projetsma_raster_map.png");

	
	//How our world will be initialized
	init{
		//Create the colony cell from the opacity of blue pixels from a source image
    	ask colony_cell {
            color <-  rgb(map_init at {grid_x,grid_y});
            write "(" + grid_x + ";" + grid_y + "): " + (color as list);
            potential <- 1 - (((color as list) at 1) / 255);
            if(((color as list) at 0) > 200){
            	potential <- 0.0;
            }
        }
        //Create the goal cell from the opacity of green pixels from a source image
    	ask goal_cell {
            color <-  rgb(map_init at {grid_x,grid_y});
            potential <- 1 - (((color as list) at 2) / 255);
            if(((color as list) at 0) > 200){
            	potential <- 0.0;
            }
        }
        
        //colony_cell and goal_cell are the radiant toward them. The TRUE cells list is where the potantial is at 1, ie, the center f the colony/goal
        list<colony_cell> true_colony <- colony_cell where (each.potential>0.90);
        list<goal_cell> true_goal <- goal_cell where (each.potential>0.95);
        
        create ant number: nb_ants_init {
        	my_cell_colo <- one_of (true_colony);
        	my_cell_goal <- my_cell_colo ;
        	location <- my_cell_colo.location; 
        }
	}
}

//Our generic specie, fathering both prey and predator
species ant {
    float size <- 1.0;
    rgb color <- #blue ;
    float satisfaction_increment <- ant_satisfaction_increment;
    float max_satisfaction <- ant_max_satisfaction;
    bool charged <- false ;
    string objective <- "feed";

    image_file my_icon <- image_file("../includes/projetsma_ant.png");
    //Pick a random cell of type colony_cell using one_of()
    //TODO limit it at cells with potential 1
    
    colony_cell my_cell_colo <- one_of (colony_cell) ;
    goal_cell my_cell_goal <- one_of(goal_cell);
    
    //Satisfaction modified each step, gets an update. Initialized at 0.
    float satisfaction <- 0.0 
    	update: satisfaction + satisfaction_increment ;
    
    
    init {
    location <- my_cell_colo.location;
    }
        
    //Reflex is movement behavior. We can add a "when: condition" that'll be executed at each step is the condition is true
    //basic_move: moves randomly to a vegetation_cell in the neighborhood of my_cell
    reflex basic_move {
    	if(objective="feed"){
    		my_cell_goal <- choose_cell_goal();
    		my_cell_colo <- my_cell_goal;
    		location <- my_cell_goal.location; 
    	}
    	if(objective="home"){
    		my_cell_colo <- choose_cell_colo();
    		my_cell_goal <- my_cell_colo;
    		location <- my_cell_colo.location; 
    	}
    }
    //Either take or put down the food
    reflex take_putdown {
	    if(my_cell_goal.potential > 0.95 and objective="feed"){
	    	charged <- true; 
	    	objective <- "home";
	    }
	    if(my_cell_colo.potential > 0.90 and objective="home"){
	    	charged <- false; 
	    	objective <- "feed";
	    }
    }
    //TODO Only activates if disatisfied
    reflex broadcast_satisfaction when: (satisfaction < 0.0) {
        //TODO broadcast own disatisfaction
    }

    float satisfaction_from_closer {
    return 0.0;
    } 
    
    //Choses the cell with the most potiental. Will have to pick the goal_cell if charges = false, and colony_cell if charged = true. Cannot pick wall_cell
    colony_cell choose_cell_colo {
    	return (my_cell_colo.neighbors2) with_max_of (each.potential);
    }
    goal_cell choose_cell_goal {
    	return (my_cell_goal.neighbors2) with_max_of (each.potential);
    }

    //The aspect that will be drawn on the board
    aspect base {
   		draw circle(size) color: color ;
    }
    
    aspect icon {
   		draw my_icon size: 2*size ;
    }
    
    aspect info {
   		draw square(size) color: color;
        draw string(satisfaction with_precision 2) size: 3 color: #black;
    }
}

//The colony behavior
grid colony_cell width: 50 height: 50 neighbors: 4 {
    //The potential will be the opacity of the map. Center of the colony/goal will be 255, the rest a fade away to drive them toward it
    float potential <- 0.0;
    rgb color <- #deepskyblue ;
    //self refers to the agent currently executing thi statement
    list<colony_cell> neighbors2 <- self neighbors_at 2;
    
    aspect infos {
    	draw square(2) color: color;
    	draw string(potential with_precision 2) size: 3 color: #blue;
    }
}

//The goal behavior
grid goal_cell width: 50 height: 50 neighbors: 4 {
    //The potential will be the opacity of the map. Center of the colony/goal will be 255, the rest a fade away to drive them toward it
    float potential <- 0.0;
    rgb color <- #mediumseagreen ;
    //self refers to the agent currently executing thi statement
    list<goal_cell> neighbors2 <- self neighbors_at 2;
    
    aspect infos {
    	draw square(2) color: color;
    	draw string(potential with_precision 2) size: 3 color: #green;
    }
}


//How our simulation will be run
experiment ant_experiment type: gui {
	//Allows the user to fiddle with the input parameters
    //Preys
    parameter "Initial number of agents: " var: nb_ants_init min: 1 max: 1000 category: "Ants" ;
	parameter "Ant satisfaction modificator: " var: ant_satisfaction_increment  category: "Ants" ;
	parameter "Ant max satisfaction: " var: ant_max_satisfaction  category: "Ants" ;
    
    //Allows to visualize the simulation
    output {
    	//Icons
	    display main_display {
	    	grid colony_cell lines: #black;
	    	//grid goal_cell lines: #black;
	        species ant aspect: icon ;
	    }
	    //Infos satisfaction
	    display satisfaction_display {
            grid colony_cell lines: #black;
            grid goal_cell lines: #black;
            species ant aspect: info;
        }
        //Infos potential
	    display potential_display_colony {
            species colony_cell aspect: infos;
        }
        display potential_display_goal {
            species goal_cell aspect: infos;
        }
        //Every 5 steps, we get 3 charts to monitor the population
        display Population_information refresh:every(5#cycles) {
		    chart "Ant satisfaction Distribution" type: histogram background: #lightgray size: {0.5,0.5} position: {0, 0.5} {
		    data "]-1;-0.75]" value: ant count (each.satisfaction <= -1.0) color:#blue;
		    data "]-0.75;-0.5]" value: ant count ((each.satisfaction > -0.75) and (each.satisfaction <= -0.5)) color:#blue;
		    data "]-0.5;-0.25]" value: ant count ((each.satisfaction > -0.5) and (each.satisfaction <= -0.25)) color:#blue;
		    data "]-0.25;0]" value: ant count ((each.satisfaction > -0.25) and (each.satisfaction <= 0.0)) color:#blue;
		    data "]0;0.25]" value: ant count ((each.satisfaction > 0.0) and (each.satisfaction <= 0.25)) color:#blue;
		    data "]0.25;0.5]" value: ant count ((each.satisfaction > 0.25) and (each.satisfaction <= 0.5)) color:#blue;
		    data "]0.5;0.75]" value: ant count ((each.satisfaction > 0.5) and (each.satisfaction <= 0.75)) color:#blue;
		    data "]0.75;1]" value: ant count (each.satisfaction > 0.75) color:#blue;
		    }
		}
	}
    
}

